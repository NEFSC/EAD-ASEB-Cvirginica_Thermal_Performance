facet_wrap(~Treatment)
F1F2F3_LowvMod.afs_qtl_treatment
?Rmisc
Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = (Frequency),
groupvars = c(AlleleType,Pop))
Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = (Frequency),
groupvars = c('AlleleType','Pop'))
Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = ('Frequency'),
groupvars = c('AlleleType','Pop'))
Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = ('Frequency'),
groupvars = c('Pop','Generation','Treatment','AlleleType'))
# calculate the meanand standard error
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE <-  Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = ('Frequency'),
groupvars = c('Pop','Generation','Treatment','AlleleType'))
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE
ggplot(F1F2F3_LowvMod.afs_qtl_treatment, aes(fill = AlleleType, y = Frequency, x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = Frequency, x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE
# plot
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE,
aes(x = Generation, y = Frequency, color = AlleleType, group = locus)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
facet_wrap(~Treatment)+
theme_minimal()
# plot
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE,
aes(x = Generation, y = Frequency, color = AlleleType)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
facet_wrap(~Treatment)+
theme_minimal()
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE,
aes(x = Generation, y = Frequency, color = AlleleType)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_line()
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = Frequency, x = Generation)) +
geom_bar(position = "stack", stat = "identity")
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE
F1F2F3_LowvMod.afs_qtl_treatment
data.frame(F1F2F3_LowvMod.afs[[1]])
data.frame(F1F2F3_LowvMod.afs[[2]])
F1F2F3_LowvMod.afs <- lapply(unique(F1F2F3_LowvMod.strata), function(pop) {
calculate_af(F1F2F3_LowvMod.gt, F1F2F3_LowvMod.ids)
})
unique(F1F2F3_LowvMod.strata) # "F1_Low"      "F1_Moderate" "F2_Low"      "F2_Moderate" "F3_Low"      "F3_Moderate"
F1F2F3_LowvMod.afs_master <- rbind(
data.frame(F1F2F3_LowvMod.afs[[1]]) %>% mutate(Pop = "F1_Low"),
data.frame(F1F2F3_LowvMod.afs[[2]]) %>% mutate(Pop = "F1_Moderate"),
data.frame(F1F2F3_LowvMod.afs[[3]]) %>% mutate(Pop = "F2_Low"),
data.frame(F1F2F3_LowvMod.afs[[4]]) %>% mutate(Pop = "F2_Moderate"),
data.frame(F1F2F3_LowvMod.afs[[5]]) %>% mutate(Pop = "F3_Low"),
data.frame(F1F2F3_LowvMod.afs[[6]]) %>% mutate(Pop = "F3_Moderate")
)
data.frame(F1F2F3_LowvMod.afs[[1]])
F1F2F3_LowvMod.afs
View(F1F2F3_LowvMod.afs)
F1F2F3_All.ids
All.strata            <- All.metadata %>% select(gen_treatment,id) # as F0 F1_Low, F1_Moderate, and so on
pop       <- strata[,1] # first column in strata
calculate_af <- function(gt.matrix, strata) {
pop       <- strata[,1] # first column in strata
ids       <- strata[,2] # second column in strata
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata), function(pop) {
calculate_af(All.gt, All.strata)
})
View(All.afs)
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
View(All.afs)
unique(All.strata$gen_treatment)
calculate_af <- function(gt.matrix, strata) {
ids       <- (strata %>% filter(gen_treatment %in% pop))id
ids       <- (strata %>% filter(gen_treatment %in% pop))$id
calculate_af <- function(gt.matrix, strata) {
ids       <- (strata %>% filter(gen_treatment %in% pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
unique(All.strata$gen_treatment)
(All.strata %>% filter(gen_treatment %in% "F0"))$id
calculate_af <- function(gt.matrix, strata) {
ids       <- (strata %>% filter(gen_treatment %in% pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
ids       <- (strata %>% filter(gen_treatment == pop))$id
ids       <- (strata %>% filter(gen_treatment = pop))$id
calculate_af <- function(gt.matrix, strata) {
ids       <- (strata %>% filter(gen_treatment = pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
calculate_af <- function(gt.matrix, strata) {
ids       <- (strata %>% filter(gen_treatment == pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
unique(All.strata$gen_treatment)
?lapply
lapply(unique(All.strata$gen_treatment), function(pop) {
print(pop)
})
lapply(unique(All.strata$gen_treatment), function(pop) {
})
pop
print()
print(pop)
lapply(unique(All.strata$gen_treatment), function(pop) {
print(pop)
})
print(pop[[1]])
print(pop[[]])
print(pop[1])
print(pop)
lapply(unique(All.strata$gen_treatment), function(pop) {
print(pop)
})
list(pop)
lapply(unique(All.strata$gen_treatment), function(pop) {
list(pop)
})
names(pop)
length(pop)
calculate_af <- function(gt.matrix, strata) {
# ids       <- (strata %>% filter(gen_treatment == pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
All.afs <- lapply(unique(All.strata$gen_treatment), function(pop) {
calculate_af(All.gt, All.strata)
})
F1F2F3_All.afs <- lapply(unique(F1F2F3_All.strata), function(pop) {
calculate_af(F1F2F3_All.gt, F1F2F3_All.ids)
})
unique(All.strata$gen_treatment)
calculate_af <- function(gt.matrix, ids) {
# ids       <- (strata %>% filter(gen_treatment == pop))$id
pop_gt    <- gt.matrix[, ids] # subset for each strate group
alt_count <- apply(pop_gt, 1, function(x)  {
alt_count <- sum(as.numeric(x != "0|0"))
})
ref_count <- apply(pop_gt, 1, function(x)  {
sum(as.numeric(x == "0|0"))
})
afs        <- cbind(data.frame(alt_count), data.frame(ref_count))
afs$locus  <- rownames(pop_gt)
afs$total_alleles <- afs$ref_count + afs$alt_count
afs$af_ref <- afs$ref_count / afs$total_alleles
afs$af_alt <- afs$alt_count / afs$total_alleles
return(c(afs))
}
calculate_af(F1F2F3_All.gt, F1F2F3_All.ids)
data.frame(unique(unique(F1F2F3_All.strata)))
F1F2F3_All.loop <- data.frame(unique(unique(F1F2F3_All.strata)))
F1F2F3_All.afs  <- data.frame()
F1F2F3_All.loop <- data.frame(unique(unique(F1F2F3_All.strata)))
F1F2F3_All.loop
F1F2F3_All.loop[1] = pop
pop = F1F2F3_All.loop[1]
pop
pop      = F1F2F3_All.loop[1]
ids      = (F1F2F3_All.gt %>% filter(gen_treatment == pop))$id
pop
pop      = F1F2F3_All.loop[1,]
pop
ids      = (F1F2F3_All.gt %>% filter(gen_treatment == pop))$id
ids      = (F1F2F3_All.gt %>% filter(gen_treatment %in% pop))$id
F1F2F3_All.gt
colnames(F1F2F3_All.gt)
ids      = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
F1F2F3_All.strata
F1F2F3_All.strata     <- F1F2F3_All.metadata %>% select(gen_treatment,id) # as F0 F1_Low, F1_Moderate, and so on
ids      = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
ids
loop.afs = calculate_af(F1F2F3_All.gt, ids)
loop.afs
data.frame(loop.afs[[1]])
data.frame(loop.afs)
(data.frame(loop.afs) %>% mutate(Pop = pop))
F1F2F3_All.loop <- data.frame(unique(unique(F1F2F3_All.strata)))
F1F2F3_All.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_All.loop)) {
pop            = F1F2F3_All.loop[i,]
ids            = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_All.gt, ids)
F1F2F3_All.afs <- rbind(F1F2F3_All.loop,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
pop            = F1F2F3_All.loop[2,]
ids            = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_All.gt, ids)
F1F2F3_All.afs <- rbind(F1F2F3_All.loop,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
F1F2F3_All.afs
F1F2F3_All.afs
F1F2F3_All.loop
F1F2F3_All.loop <- data.frame(unique(unique(F1F2F3_All.strata)))
F1F2F3_All.afs  <- data.frame()
F1F2F3_All.loop <- data.frame(unique(F1F2F3_All.strata))
F1F2F3_All.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_All.loop)) {
pop            = F1F2F3_All.loop[i,]
ids            = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_All.gt, ids)
F1F2F3_All.afs = rbind(F1F2F3_All.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_All.afs
F1F2F3_LowvMod.loop[1,]
F1F2F3_All.loop[1,]
F1F2F3_All.loop$gen_treatment[1]
F1F2F3_LowvMod.loop <- data.frame(unique(F1F2F3_LowvMod.strata))
F1F2F3_LowvMod.afs  <- data.frame()
F1F2F3_LowvMod.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_LowvMod.loop)) {
pop            = F1F2F3_LowvMod.loop$gen_treatment[i]
ids            = (F1F2F3_LowvMod.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_LowvMod.gt, ids)
F1F2F3_LowvMod.afs = rbind(F1F2F3_LowvMod.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_LowvMod.loop <- data.frame(unique(F1F2F3_LowvMod.strata))
F1F2F3_LowvMod.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_LowvMod.loop)) {
pop            = F1F2F3_LowvMod.loop$gen_treatment[i]
ids            = (F1F2F3_LowvMod.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_LowvMod.gt, ids)
F1F2F3_LowvMod.afs = rbind(F1F2F3_LowvMod.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_All.loop <- data.frame(unique(F1F2F3_All.strata))
F1F2F3_All.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_All.loop)) {
pop            = F1F2F3_All.loop$gen_treatment[i]
ids            = (F1F2F3_All.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_All.gt, ids)
F1F2F3_All.afs = rbind(F1F2F3_All.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_LowvMod.loop <- data.frame(unique(F1F2F3_LowvMod.strata))
F1F2F3_LowvMod.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_LowvMod.loop)) {
pop            = F1F2F3_LowvMod.loop$gen_treatment[i]
ids            = (F1F2F3_LowvMod.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_LowvMod.gt, ids)
F1F2F3_LowvMod.afs = rbind(F1F2F3_LowvMod.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_LowvMod.strata
F1F2F3_LowvMod.strata  <- F1F2F3_LowvMod.metadata %>% select(gen_treatment,id) # as F0 F1_Low, F1_Moderate, and so on
F1F2F3_LowvMod.loop <- data.frame(unique(F1F2F3_LowvMod.strata))
F1F2F3_LowvMod.afs  <- data.frame()
for (i in 1:nrow(F1F2F3_LowvMod.loop)) {
pop            = F1F2F3_LowvMod.loop$gen_treatment[i]
ids            = (F1F2F3_LowvMod.strata %>% filter(gen_treatment %in% pop))$id
loop.afs       = calculate_af(F1F2F3_LowvMod.gt, ids)
F1F2F3_LowvMod.afs = rbind(F1F2F3_LowvMod.afs,
(data.frame(loop.afs) %>% mutate(Pop = pop))
)
}
F1F2F3_LowvMod.afs
F1F2F3_LowvMod.afs_qtl_treatment <- F1F2F3_LowvMod.afs %>%
dplyr::filter(locus %in%
gsub("^(CM\\d+)_1_(\\d+)\\.(\\d+)$", "\\1.\\3_\\2",
F1F2F3_LowvMod.qtl_treatment$locus)) %>%
tidyr::pivot_longer(cols = c(af_ref, af_alt),
names_to = "AlleleType",
values_to = "Frequency") %>%
dplyr::mutate(Treatment = gsub('.*_', '',Pop),
Generation = gsub('_.*', '',Pop))
# sanity check
length(unique(F1F2F3_LowvMod.afs_qtl_treatment$locus)) == nrow(F1F2F3_LowvMod.qtl_treatment)
# calculate the meanand standard error
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE <-  Rmisc::summarySE(F1F2F3_LowvMod.afs_qtl_treatment,
measurevar = ('Frequency'),
groupvars = c('Pop','Generation','Treatment','AlleleType'))
F1F2F3_LowvMod.afs_qtl_treatmentMEANSE
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
# plot
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE,
aes(x = Generation, y = Frequency, color = AlleleType)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
facet_wrap(~Treatment)+
theme_minimal()
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
# plot
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, color = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
theme_minimal()
# plot
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, color = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_point() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
theme_minimal()
# plot
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, color = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_point() +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
theme_minimal()
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, color = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_point()
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, color = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_point() +
geom_line()
# plot
ggplot(data = (F1F2F3_LowvMod.afs_qtl_treatment %>% filter(AlleleType %in% 'af_alt')),
aes(group = locus, x = Generation, y = Frequency, fill = Treatment)) +
# geom_bar(stat = "identity", position = "dodge") +
geom_point() +
geom_line() +
labs(title = "Allele Frequencies by Locus and Population",
x = "Population",
y = "Frequency",
fill = "Allele Type") +
theme_minimal()
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
# plot
ggplot(F1F2F3_LowvMod.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
F1F2F3_All.afs_qtl_treatment <- F1F2F3_All.afs %>%
dplyr::filter(locus %in%
gsub("^(CM\\d+)_1_(\\d+)\\.(\\d+)$", "\\1.\\3_\\2",
F1F2F3_All.qtl_treatment$locus)) %>%
tidyr::pivot_longer(cols = c(af_ref, af_alt),
names_to = "AlleleType",
values_to = "Frequency") %>%
dplyr::mutate(Treatment = gsub('.*_', '',Pop),
Generation = gsub('_.*', '',Pop))
# sanity check
length(unique(F1F2F3_All.afs_qtl_treatment$locus)) == nrow(F1F2F3_All.qtl_treatment)
# calculate the meanand standard error
F1F2F3_All.afs_qtl_treatmentMEANSE <-  Rmisc::summarySE(F1F2F3_All.afs_qtl_treatment,
measurevar = ('Frequency'),
groupvars = c('Pop','Generation','Treatment','AlleleType'))
# plot
ggplot(F1F2F3_All.afs_qtl_treatmentMEANSE, aes(fill = AlleleType, y = as.numeric(Frequency), x = Generation)) +
geom_bar(position = "stack", stat = "identity") +
ggtitle("Stacked Bar Chart") +
facet_wrap(~Treatment)
ggplot(
(data = F1F2F3_All.afs_qtl_treatment %>%  filter(AlleleType %in% 'af_alt')), # truncate to alternative alle only
aes(x = locus, y = Frequency, color = Treatment)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) # Remove confidence intervals
ggplot(
(data = F1F2F3_All.afs_qtl_treatment %>%  filter(AlleleType %in% 'af_alt')), # truncate to alternative alle only
aes(x = Generation,group = locus, y = Frequency, color = Treatment)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) # Remove confidence intervals
ggplot(
(data = F1F2F3_All.afs_qtl_treatment %>%  filter(AlleleType %in% 'af_alt')), # truncate to alternative alle only
aes(x = Generation,  y = Frequency, color = Treatment)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +# Remove confidence intervals
facet_wrap(~locus)
(data = F1F2F3_All.afs_qtl_treatment %>%  filter(AlleleType %in% 'af_alt')), # truncate to alternative alle only
ggplot(
(data = F1F2F3_All.afs_qtl_treatment %>%  filter(AlleleType %in% 'af_alt')), # truncate to alternative alle only
aes(x = Generation,  y = Frequency, color = Treatment)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +# Remove confidence intervals
facet_wrap(~locus)
